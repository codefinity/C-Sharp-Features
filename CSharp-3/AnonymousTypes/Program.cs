using System;
using System.Collections.Generic;
using System.Linq;

namespace AnonymousTypes
{
    class Program
    {
        static void Main(string[] args)
        {
            //Anonymous types provide a convenient way to encapsulate a set of read-only
            //properties into a single object without having to explicitly define a type first. 
            //The type name is generated by the compiler and is not available at the source code level. 
            //The type of each property is inferred by the compiler.

            //Anonymous types typically are used in the select clause of a query expression to 
            //return a subset of the properties from each object in the source sequence. 
            //For more information about queries, see LINQ in C#.

            //Anonymous types contain one or more public read-only properties. 
            //No other kinds of class members, such as methods or events, are valid. 
            //The expression that is used to initialize a property cannot be null, an anonymous function, 
            //or a pointer type.

            //You cannot declare a field, a property, an event, or the return type of a method as having an 
            //anonymous type. Similarly, you cannot declare a formal parameter of a method, property, 
            //constructor, or indexer as having an anonymous type. To pass an anonymous type, or a 
            //collection that contains anonymous types, as an argument to a method, you can declare 
            //the parameter as type object. However, doing this defeats the purpose of strong typing. 
            //If you must store query results or pass them outside the method boundary, consider using 
            //an ordinary named struct or class instead of an anonymous type.

            var item = new { Amount = 108, Message = "Hello" };

            // Rest the mouse pointer over v.Amount and v.Message in the following  
            // statement to verify that their inferred types are int and string.  
            Console.WriteLine(item.Amount);
            Console.WriteLine(item.Message);


            //The most common scenario is to initialize an anonymous type with properties from another type. 
            //In the following example, assume that a class exists that is named Product. Class Product 
            //includes Color and Price properties, together with other properties that you are not interested in. 
            //Variable products is a collection of Product objects. The anonymous type declaration starts 
            //with the new keyword. The declaration initializes a new type that uses only two properties from 
            //Product. This causes a smaller amount of data to be returned in the query.

            //If you do not specify member names in the anonymous type, the compiler gives the 
            //anonymous type members the same name as the property being used to initialize them. 
            //You must provide a name for a property that is being initialized with an expression, 
            //as shown in the previous example.In the following example, the names of the properties of the 
            //anonymous type are Color and Price.


            List<Product> products = new List<Product>() { new Product {  Name="N1", Color= "Yellow", Price=10, Message="M1"},
                                                            new Product {  Name="N2", Color= "Red", Price=20, Message="M2"},
                                                            new Product {  Name="N3", Color= "Blue", Price=30, Message="M3"},
                                                            new Product {  Name="N4", Color= "Maroon", Price=40, Message="M4"}
                                                            };


            var productQueries =
                from prod in products
                select new { prod.Color, prod.Price };

            foreach (var query in productQueries)
            {
                Console.WriteLine("Color={0}, Price={1}", query.Color, query.Price);

                //query.Name, query.Message are not accessable
                //Console.WriteLine("Name={0}, Message={1}", query.Name, query.Message);
            }



            //Source: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types

        }
    }
}
